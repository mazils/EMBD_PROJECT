// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_nn_inference_Pipeline_loop11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp_output2_0_address0,
        temp_output2_0_ce0,
        temp_output2_0_we0,
        temp_output2_0_d0,
        temp_output2_0_address1,
        temp_output2_0_ce1,
        temp_output2_0_q1,
        grp_fu_1332_p_din0,
        grp_fu_1332_p_din1,
        grp_fu_1332_p_opcode,
        grp_fu_1332_p_dout0,
        grp_fu_1332_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] temp_output2_0_address0;
output   temp_output2_0_ce0;
output   temp_output2_0_we0;
output  [31:0] temp_output2_0_d0;
output  [3:0] temp_output2_0_address1;
output   temp_output2_0_ce1;
input  [31:0] temp_output2_0_q1;
output  [31:0] grp_fu_1332_p_din0;
output  [31:0] grp_fu_1332_p_din1;
output  [4:0] grp_fu_1332_p_opcode;
input  [0:0] grp_fu_1332_p_dout0;
output   grp_fu_1332_p_ce;

reg ap_idle;
reg temp_output2_0_ce0;
reg temp_output2_0_we0;
reg temp_output2_0_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_75_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] temp_output2_0_addr_reg_147;
reg   [3:0] temp_output2_0_addr_reg_147_pp0_iter1_reg;
reg   [3:0] temp_output2_0_addr_reg_147_pp0_iter2_reg;
reg   [3:0] temp_output2_0_addr_reg_147_pp0_iter3_reg;
reg   [31:0] temp_output2_0_load_reg_153;
wire   [0:0] icmp_ln87_fu_114_p2;
reg   [0:0] icmp_ln87_reg_159;
wire   [0:0] icmp_ln87_1_fu_120_p2;
reg   [0:0] icmp_ln87_1_reg_164;
wire   [0:0] and_ln87_fu_130_p2;
reg   [0:0] and_ln87_reg_169;
wire   [63:0] i_1_cast_fu_87_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] i_fu_40;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
wire   [4:0] add_ln85_fu_81_p2;
wire   [31:0] bitcast_ln87_fu_97_p1;
wire   [7:0] tmp_2_fu_100_p4;
wire   [22:0] trunc_ln87_fu_110_p1;
wire   [0:0] or_ln87_fu_126_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nn_inference_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_75_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln85_fu_81_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln87_reg_169 <= and_ln87_fu_130_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln87_1_reg_164 <= icmp_ln87_1_fu_120_p2;
        icmp_ln87_reg_159 <= icmp_ln87_fu_114_p2;
        temp_output2_0_addr_reg_147_pp0_iter2_reg <= temp_output2_0_addr_reg_147_pp0_iter1_reg;
        temp_output2_0_addr_reg_147_pp0_iter3_reg <= temp_output2_0_addr_reg_147_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        temp_output2_0_addr_reg_147_pp0_iter1_reg <= temp_output2_0_addr_reg_147;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_75_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_output2_0_addr_reg_147 <= i_1_cast_fu_87_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_output2_0_load_reg_153 <= temp_output2_0_q1;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_75_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        temp_output2_0_ce0 = 1'b1;
    end else begin
        temp_output2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_output2_0_ce1 = 1'b1;
    end else begin
        temp_output2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln87_reg_169) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        temp_output2_0_we0 = 1'b1;
    end else begin
        temp_output2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_fu_81_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign and_ln87_fu_130_p2 = (or_ln87_fu_126_p2 & grp_fu_1332_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln87_fu_97_p1 = temp_output2_0_load_reg_153;

assign grp_fu_1332_p_ce = 1'b1;

assign grp_fu_1332_p_din0 = temp_output2_0_load_reg_153;

assign grp_fu_1332_p_din1 = 32'd0;

assign grp_fu_1332_p_opcode = 5'd4;

assign i_1_cast_fu_87_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln85_fu_75_p2 = ((ap_sig_allocacmp_i_1 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln87_1_fu_120_p2 = ((trunc_ln87_fu_110_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_114_p2 = ((tmp_2_fu_100_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln87_fu_126_p2 = (icmp_ln87_reg_159 | icmp_ln87_1_reg_164);

assign temp_output2_0_address0 = temp_output2_0_addr_reg_147_pp0_iter3_reg;

assign temp_output2_0_address1 = i_1_cast_fu_87_p1;

assign temp_output2_0_d0 = 32'd0;

assign tmp_2_fu_100_p4 = {{bitcast_ln87_fu_97_p1[30:23]}};

assign trunc_ln87_fu_110_p1 = bitcast_ln87_fu_97_p1[22:0];

endmodule //nn_inference_nn_inference_Pipeline_loop11
